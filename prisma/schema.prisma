generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique
  slug String @unique

  image_url        String? @map("imageUrl")
  description      String?
  meta_title       String? @map("metaTitle")
  meta_description String? @map("metaDescription")
  published        Boolean @default(true)

  products Product[]

  @@map("category")
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String   @unique
  slug        String   @unique
  price       Float
  old_price   Float    @default(0) @map("oldPrice")
  published   Boolean  @default(true)
  image_url   String   @map("imageUrl")
  description String   @default("")
  rating      Float    @default(0)
  category_id String   @map("categoryId")
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  images ProductImage[]

  @@index([category_id])
  @@map("product")
}

model ProductImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product_id String  @map("productId")
  image_url  String  @map("imageUrl")
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  // @@index([product_id])
  @@map("productImage")
}

model Customer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer_id String  @unique @map("customerId")
  first_name  String? @map("firstname")
  last_name   String? @map("lastname")
  email       String  @unique
  avatar_url  String? @map("avatarUrl")
  phone       String? @map("phoneNumber")
  role        Role    @default(CUSTOMER)

  addresses Address[]
  orders    Order[]

  @@map("customer")
}

enum Role {
  CUSTOMER
  ADMIN
}

model Address {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address_1    String      @map("addressLine1")
  address_2    String?     @map("addressLine2")
  city         String
  state        String
  country      String
  zip_code     String      @map("zipCode")
  address_type AddressType @default(billing) @map("addressType")
  is_default   Boolean     @default(false) @map("isDefault")

  customer_id String   @map("customerId")
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@index([customer_id])
  @@map("address")
}

enum AddressType {
  shipping
  billing
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status      OrderStatus @default(PENDING)
  total_price Float       @map("totalPrice")

  orderItems   OrderItem[]
  custormer_id String      @map("customerId")
  customer     Customer    @relation(fields: [custormer_id], references: [id], onDelete: Cascade)

  @@index([custormer_id])
  @@map("order")
}

enum OrderStatus {
  PENDING
  CANCELED
  COMPLETED
}

model OrderItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product_id String @map("productId")
  quantity   Int

  order_id String @map("orderId")
  order    Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@map("orderItem")
}

model ApiClient {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  first_name String?  @map("firstname")
  last_name  String?  @map("lastname")
  email      String   @unique
  api_key    String   @map("apikey")
}
